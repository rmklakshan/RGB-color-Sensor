
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f9  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  000009bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034a  00000000  00000000  00000f73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000332  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018a  00000000  00000000  00001636  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  7a:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <key>:

#ifndef KEYPAD2_H_
#define KEYPAD2_H_

char key()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	60 97       	sbiw	r28, 0x10	; 16
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char keypad[4][4]= {{'1','2','3','A'},{'4','5','6','B'},{'7','8','9','C'},{'*','0','#','D'}};
  96:	80 e1       	ldi	r24, 0x10	; 16
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <key+0x1e>

	DDRA &= 0Xf0; //0-3 input, 4-7 input
  a8:	8a b3       	in	r24, 0x1a	; 26
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	8a bb       	out	0x1a, r24	; 26
	PORTA |= 0X0f; // powered up the pull up res in inputs (col)
  ae:	8b b3       	in	r24, 0x1b	; 27
  b0:	8f 60       	ori	r24, 0x0F	; 15
  b2:	8b bb       	out	0x1b, r24	; 27
	DDRB |= 0X0f; //0-3  output
  b4:	87 b3       	in	r24, 0x17	; 23
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0X0f; //   rows (outputs) set to high ,
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	8f 60       	ori	r24, 0x0F	; 15
  be:	88 bb       	out	0x18, r24	; 24

	for (int r=0; r<4; r++){ //changing r th row value to 0 in PORTB
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	50 e0       	ldi	r21, 0x00	; 0
  c4:	34 c0       	rjmp	.+104    	; 0x12e <key+0xac>
		PORTB &= ~(1<<r);
  c6:	28 b3       	in	r18, 0x18	; 24
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	04 2e       	mov	r0, r20
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <key+0x52>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <key+0x4e>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	88 bb       	out	0x18, r24	; 24
		
		for (int c=0; c<4; c++){ //checking columns
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	1d c0       	rjmp	.+58     	; 0x11e <key+0x9c>
			if (~(PINA) & (1<<c)){return keypad[r][c];} 
  e4:	89 b3       	in	r24, 0x19	; 25
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	80 95       	com	r24
  ea:	90 95       	com	r25
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <key+0x72>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <key+0x6e>
  f8:	80 ff       	sbrs	r24, 0
  fa:	0f c0       	rjmp	.+30     	; 0x11a <key+0x98>
  fc:	44 0f       	add	r20, r20
  fe:	55 1f       	adc	r21, r21
 100:	44 0f       	add	r20, r20
 102:	55 1f       	adc	r21, r21
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	8c 0f       	add	r24, r28
 10a:	9d 1f       	adc	r25, r29
 10c:	48 0f       	add	r20, r24
 10e:	59 1f       	adc	r21, r25
 110:	fa 01       	movw	r30, r20
 112:	e2 0f       	add	r30, r18
 114:	f3 1f       	adc	r31, r19
 116:	80 81       	ld	r24, Z
 118:	0d c0       	rjmp	.+26     	; 0x134 <key+0xb2>
	PORTB |= 0X0f; //   rows (outputs) set to high ,

	for (int r=0; r<4; r++){ //changing r th row value to 0 in PORTB
		PORTB &= ~(1<<r);
		
		for (int c=0; c<4; c++){ //checking columns
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	24 30       	cpi	r18, 0x04	; 4
 120:	31 05       	cpc	r19, r1
 122:	04 f3       	brlt	.-64     	; 0xe4 <key+0x62>
			if (~(PINA) & (1<<c)){return keypad[r][c];} 
		}
		PORTB |= 0X0f; //reset PORTB
 124:	88 b3       	in	r24, 0x18	; 24
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	88 bb       	out	0x18, r24	; 24
	DDRA &= 0Xf0; //0-3 input, 4-7 input
	PORTA |= 0X0f; // powered up the pull up res in inputs (col)
	DDRB |= 0X0f; //0-3  output
	PORTB |= 0X0f; //   rows (outputs) set to high ,

	for (int r=0; r<4; r++){ //changing r th row value to 0 in PORTB
 12a:	4f 5f       	subi	r20, 0xFF	; 255
 12c:	5f 4f       	sbci	r21, 0xFF	; 255
 12e:	44 30       	cpi	r20, 0x04	; 4
 130:	51 05       	cpc	r21, r1
 132:	4c f2       	brlt	.-110    	; 0xc6 <key+0x44>
			if (~(PINA) & (1<<c)){return keypad[r][c];} 
		}
		PORTB |= 0X0f; //reset PORTB
	}

}
 134:	60 96       	adiw	r28, 0x10	; 16
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	f8 94       	cli
 13a:	de bf       	out	0x3e, r29	; 62
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:
#include <util/delay.h>			/* Include Delay header file */
#include "keypad2.h"


int main(void)
{ DDRC=0xff;
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	84 bb       	out	0x14, r24	; 20
	PORTC= 0;
 14a:	15 ba       	out	0x15, r1	; 21
	char k;
    
    while (1) {
		k = key();
 14c:	0e 94 41 00 	call	0x82	; 0x82 <key>
		if (k== '5' ){PORTC = 2; _delay_ms(100); PORTC = 0;}
 150:	85 33       	cpi	r24, 0x35	; 53
 152:	61 f4       	brne	.+24     	; 0x16c <main+0x26>
 154:	92 e0       	ldi	r25, 0x02	; 2
 156:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	30 e7       	ldi	r19, 0x70	; 112
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	30 40       	sbci	r19, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0x18>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x22>
 168:	00 00       	nop
 16a:	15 ba       	out	0x15, r1	; 21
		if (k =='6'){PORTC = 1; _delay_ms(100); PORTC = 0;}
 16c:	86 33       	cpi	r24, 0x36	; 54
 16e:	61 f4       	brne	.+24     	; 0x188 <main+0x42>
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	95 bb       	out	0x15, r25	; 21
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	30 e7       	ldi	r19, 0x70	; 112
 178:	92 e0       	ldi	r25, 0x02	; 2
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	30 40       	sbci	r19, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x34>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x3e>
 184:	00 00       	nop
 186:	15 ba       	out	0x15, r1	; 21
		if (k=='*'){PORTC = 3; _delay_ms(100); PORTC = 0;}
 188:	8a 32       	cpi	r24, 0x2A	; 42
 18a:	01 f7       	brne	.-64     	; 0x14c <main+0x6>
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	85 bb       	out	0x15, r24	; 21
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	30 e7       	ldi	r19, 0x70	; 112
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	21 50       	subi	r18, 0x01	; 1
 198:	30 40       	sbci	r19, 0x00	; 0
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <main+0x50>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x5a>
 1a0:	00 00       	nop
 1a2:	15 ba       	out	0x15, r1	; 21
 1a4:	d3 cf       	rjmp	.-90     	; 0x14c <main+0x6>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
