
lcd__.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000023c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ad3  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000063d  00000000  00000000  00000e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000406  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000522  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000021d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 04 01 	call	0x208	; 0x208 <main>
  7a:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
#define EN PB1 				    /* Define Enable signal pin */


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9f 70       	andi	r25, 0x0F	; 15
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		                  /* RS=0, command reg. */
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	9e 7f       	andi	r25, 0xFE	; 254
  92:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<EN);	               	      /* Enable pulse */
  94:	98 b3       	in	r25, 0x18	; 24
  96:	92 60       	ori	r25, 0x02	; 2
  98:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	32 e0       	ldi	r19, 0x02	; 2
  9c:	3a 95       	dec	r19
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_Command+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_Command+0x20>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	98 bb       	out	0x18, r25	; 24
  a8:	ef e8       	ldi	r30, 0x8F	; 143
  aa:	f1 e0       	ldi	r31, 0x01	; 1
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x30>
  b2:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
  b4:	28 b3       	in	r18, 0x18	; 24
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	92 2f       	mov	r25, r18
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	89 2b       	or	r24, r25
  c4:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	32 e0       	ldi	r19, 0x02	; 2
  ce:	3a 95       	dec	r19
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_Command+0x4c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e9       	ldi	r24, 0x9F	; 159
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x62>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <LCD_Char>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0);  /* sending upper nibble */
  e8:	98 b3       	in	r25, 0x18	; 24
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	28 2f       	mov	r18, r24
  ee:	20 7f       	andi	r18, 0xF0	; 240
  f0:	92 2b       	or	r25, r18
  f2:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		                   /* RS=1, data reg. */
  f4:	98 b3       	in	r25, 0x18	; 24
  f6:	91 60       	ori	r25, 0x01	; 1
  f8:	98 bb       	out	0x18, r25	; 24
	LCD_Port|= (1<<EN);
  fa:	98 b3       	in	r25, 0x18	; 24
  fc:	92 60       	ori	r25, 0x02	; 2
  fe:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	32 e0       	ldi	r19, 0x02	; 2
 102:	3a 95       	dec	r19
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Char+0x1a>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_Char+0x20>
	_delay_us(1); 
	LCD_Port &= ~ (1<<EN);
 108:	98 b3       	in	r25, 0x18	; 24
 10a:	9d 7f       	andi	r25, 0xFD	; 253
 10c:	98 bb       	out	0x18, r25	; 24
 10e:	ef e8       	ldi	r30, 0x8F	; 143
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x30>
 118:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4);     /* sending lower nibble */
 11a:	28 b3       	in	r18, 0x18	; 24
 11c:	f0 e1       	ldi	r31, 0x10	; 16
 11e:	8f 9f       	mul	r24, r31
 120:	c0 01       	movw	r24, r0
 122:	11 24       	eor	r1, r1
 124:	92 2f       	mov	r25, r18
 126:	9f 70       	andi	r25, 0x0F	; 15
 128:	89 2b       	or	r24, r25
 12a:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	88 bb       	out	0x18, r24	; 24
 132:	32 e0       	ldi	r19, 0x02	; 2
 134:	3a 95       	dec	r19
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Char+0x4c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Char+0x52>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x5c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Char+0x62>
 14a:	00 00       	nop
 14c:	08 95       	ret

0000014e <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			   /* LCD Initialize function */
{
	LCD_Dir = 0xFF;			       /* Make LCD port direction as o/p */
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	87 bb       	out	0x17, r24	; 23
 152:	8f e3       	ldi	r24, 0x3F	; 63
 154:	9c e9       	ldi	r25, 0x9C	; 156
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_Init+0x8>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_Init+0xe>
 15c:	00 00       	nop
	_delay_ms(20);			       /* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);       /* send for 4 bit initialization of LCD  */
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x28);             /* 2 line, 5*7 matrix in 4-bit mode */
 164:	88 e2       	ldi	r24, 0x28	; 40
 166:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0c);             /* Display on cursor off*/
 16a:	8c e0       	ldi	r24, 0x0C	; 12
 16c:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06);             /* Increment cursor (shift cursor to right)*/
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01);             /* Clear display screen*/
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Init+0x32>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Init+0x38>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <LCD_String>:
	_delay_ms(2);
}


void LCD_String (char *str)		   /* Send string to LCD function */
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	8c 01       	movw	r16, r24
	int i;
	for(i=0;str[i]!=0;i++)		   /* Send each char of string till the NULL */
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
 19a:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>


void LCD_String (char *str)		   /* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		   /* Send each char of string till the NULL */
 19e:	21 96       	adiw	r28, 0x01	; 1
 1a0:	f8 01       	movw	r30, r16
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	80 81       	ld	r24, Z
 1a8:	81 11       	cpse	r24, r1
 1aa:	f7 cf       	rjmp	.-18     	; 0x19a <LCD_String+0x10>
	{
		LCD_Char (str[i]);
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	0f 91       	pop	r16
 1b4:	08 95       	ret

000001b6 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 1bc:	81 11       	cpse	r24, r1
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <LCD_String_xy+0x1a>
 1c0:	60 31       	cpi	r22, 0x10	; 16
 1c2:	30 f4       	brcc	.+12     	; 0x1d0 <LCD_String_xy+0x1a>
	LCD_Command((pos & 0x0F)|0x80);	       /* Command of first row and required position<16 */
 1c4:	86 2f       	mov	r24, r22
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	39 f4       	brne	.+14     	; 0x1e2 <LCD_String_xy+0x2c>
 1d4:	60 31       	cpi	r22, 0x10	; 16
 1d6:	28 f4       	brcc	.+10     	; 0x1e2 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	       /* Command of first row and required position<16 */
 1d8:	86 2f       	mov	r24, r22
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	80 6c       	ori	r24, 0xC0	; 192
 1de:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_String(str);		               /* Call LCD string function */
 1e2:	ce 01       	movw	r24, r28
 1e4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
}
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <LCD_Clear+0xa>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <LCD_Clear+0x10>
 1fe:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 200:	80 e8       	ldi	r24, 0x80	; 128
 202:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
 206:	08 95       	ret

00000208 <main>:
}

int main()
{

	LCD_Init();		/* Initialization of LCD*/
 208:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_Init>

	LCD_String("lakshan");	/* Write string on 1st line of LCD*/
 20c:	80 e6       	ldi	r24, 0x60	; 96
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_String>
	//LCD_Command(0xC0);		/* Go to 2nd line*/
	LCD_String_xy(1,5,"nimue");
 214:	48 e6       	ldi	r20, 0x68	; 104
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LCD_String_xy>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	80 e7       	ldi	r24, 0x70	; 112
 224:	92 e0       	ldi	r25, 0x02	; 2
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x1e>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x28>
 230:	00 00       	nop
	_delay_ms(100); 
	LCD_Clear();
 232:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCD_Clear>
 236:	ff cf       	rjmp	.-2      	; 0x236 <main+0x2e>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
