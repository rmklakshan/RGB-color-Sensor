
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000140  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080c  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000615  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000312  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000013a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  00001400  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c5  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 00 	call	0xca	; 0xca <main>
  7a:	0c 94 9e 00 	jmp	0x13c	; 0x13c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <command>:
#include <util/delay.h>


void command (unsigned char cmd)
{
	PORTC = 0x02;
  82:	92 e0       	ldi	r25, 0x02	; 2
  84:	95 bb       	out	0x15, r25	; 21
	PORTD = cmd;
  86:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x00;
  88:	15 ba       	out	0x15, r1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e5       	ldi	r24, 0x5F	; 95
  8c:	9a ee       	ldi	r25, 0xEA	; 234
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <command+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <command+0x12>
  94:	00 00       	nop
  96:	08 95       	ret

00000098 <lcd_data>:
	_delay_ms (15);	
}

void lcd_data (unsigned char data)
{
	PORTC = 0x03;
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	95 bb       	out	0x15, r25	; 21
	PORTD = data;
  9c:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x01;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	85 bb       	out	0x15, r24	; 21
  a2:	8f e5       	ldi	r24, 0x5F	; 95
  a4:	9a ee       	ldi	r25, 0xEA	; 234
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <lcd_data+0xe>
  aa:	00 c0       	rjmp	.+0      	; 0xac <lcd_data+0x14>
  ac:	00 00       	nop
  ae:	08 95       	ret

000000b0 <lcd_print>:
	_delay_ms(15);
}

void lcd_print (char *p)
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
	while (*p)
  b6:	03 c0       	rjmp	.+6      	; 0xbe <lcd_print+0xe>
	{
		lcd_data(*p++);
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	0e 94 4c 00 	call	0x98	; 0x98 <lcd_data>
	_delay_ms(15);
}

void lcd_print (char *p)
{
	while (*p)
  be:	88 81       	ld	r24, Y
  c0:	81 11       	cpse	r24, r1
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <lcd_print+0x8>
	{
		lcd_data(*p++);
		
	}
	
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC = 0xff;
  ca:	8f ef       	ldi	r24, 0xFF	; 255
  cc:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xff;
  ce:	81 bb       	out	0x11, r24	; 17
	
	command (0x38);
  d0:	88 e3       	ldi	r24, 0x38	; 56
  d2:	0e 94 41 00 	call	0x82	; 0x82 <command>
	command (0x0f);
  d6:	8f e0       	ldi	r24, 0x0F	; 15
  d8:	0e 94 41 00 	call	0x82	; 0x82 <command>
	command (0x01);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 41 00 	call	0x82	; 0x82 <command>

		
    while (1) 
    {
		command (0x80);
  e2:	80 e8       	ldi	r24, 0x80	; 128
  e4:	0e 94 41 00 	call	0x82	; 0x82 <command>
		lcd_print("Lakshan");
  e8:	80 e6       	ldi	r24, 0x60	; 96
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_print>
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	81 ee       	ldi	r24, 0xE1	; 225
  f4:	94 e0       	ldi	r25, 0x04	; 4
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2c>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x36>
 100:	00 00       	nop
		_delay_ms(100);
		command (0XC0);
 102:	80 ec       	ldi	r24, 0xC0	; 192
 104:	0e 94 41 00 	call	0x82	; 0x82 <command>
		lcd_print ("Rathnayake");
 108:	88 e6       	ldi	r24, 0x68	; 104
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <lcd_print>
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	81 ee       	ldi	r24, 0xE1	; 225
 114:	94 e0       	ldi	r25, 0x04	; 4
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x4c>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x56>
 120:	00 00       	nop
		_delay_ms(100);
		command (0x01);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 41 00 	call	0x82	; 0x82 <command>
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	81 ee       	ldi	r24, 0xE1	; 225
 12c:	94 e0       	ldi	r25, 0x04	; 4
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <main+0x64>
 136:	00 c0       	rjmp	.+0      	; 0x138 <main+0x6e>
 138:	00 00       	nop
 13a:	d3 cf       	rjmp	.-90     	; 0xe2 <main+0x18>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
